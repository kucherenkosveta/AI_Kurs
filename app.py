import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from model import train_model, predict
import joblib
from sklearn.preprocessing import StandardScaler
import os
from config import DATASET_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤",
    page_icon="üéì",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
st.markdown("""
    –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤.
""")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_app_data():
    data = pd.read_csv(DATASET_PATH, sep=';', decimal=',')
    return data

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
@st.cache_resource
def load_model():
    if not os.path.exists('optimized_model.joblib'):
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—É—á–∞–µ–º –Ω–æ–≤—É—é
        data = pd.read_csv('abiturients_dataset.csv', sep=';', decimal=',')
        model, accuracy, cm, feature_importance = train_model(data)
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        model = joblib.load('optimized_model.joblib')
        scaler = joblib.load('scaler.joblib')
        label_encoders = joblib.load('label_encoders.joblib')
    return model, scaler, label_encoders

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
if 'data' not in st.session_state:
    st.session_state['data'] = load_app_data()
    st.session_state['model'], st.session_state['scaler'], st.session_state['label_encoders'] = load_model()

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
def show_data_overview():
    st.header("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    df = st.session_state['data']
    
    st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    st.dataframe(df.head())
    
    st.write("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    st.write(df.describe())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def analyze_data():
    st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    df = st.session_state['data']
    
    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        ["–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]
    )
    
    if analysis_type == "–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(df.describe())
        
    elif analysis_type == "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è":
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        chart_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
            ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è", "–Ø—â–∏–∫ —Å —É—Å–∞–º–∏"]
        )
        
        if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", df.columns)
            fig = px.histogram(df, x=column, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {column}",
                             color_discrete_sequence=['#66B2FF'])
            st.plotly_chart(fig)
            
        elif chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            col1, col2 = st.columns(2)
            with col1:
                x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ X:", 
                                      [col for col in df.columns if df[col].dtype in ['int64', 'float64']])
            with col2:
                y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Å–∏ Y:", 
                                      [col for col in df.columns if df[col].dtype in ['int64', 'float64']])
            
            color_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ —Ç–æ—á–µ–∫:", 
                                      ['–ù–µ—Ç'] + [col for col in df.columns if col not in [x_column, y_column]])
            
            if color_column != '–ù–µ—Ç':
                fig = px.scatter(df, x=x_column, y=y_column, color=color_column,
                               title=f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: {x_column} vs {y_column}",
                               color_discrete_sequence=['#66B2FF', '#FF9999', '#99FF99', '#FFCC99', '#FF99CC', '#99CCFF'])
            else:
                fig = px.scatter(df, x=x_column, y=y_column,
                               title=f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è: {x_column} vs {y_column}",
                               color_discrete_sequence=['#66B2FF'])
            
            st.plotly_chart(fig)
            
        elif chart_type == "–Ø—â–∏–∫ —Å —É—Å–∞–º–∏":
            column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                                [col for col in df.columns if df[col].dtype in ['int64', 'float64']])
            group_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:", 
                                      ['–ù–µ—Ç'] + [col for col in df.columns if col != column])
            
            if group_column != '–ù–µ—Ç':
                fig = px.box(df, x=group_column, y=column, 
                           title=f"–Ø—â–∏–∫ —Å —É—Å–∞–º–∏: {column} –ø–æ {group_column}",
                           color_discrete_sequence=['#66B2FF', '#99CCFF'])
            else:
                fig = px.box(df, y=column, title=f"–Ø—â–∏–∫ —Å —É—Å–∞–º–∏: {column}",
                           color_discrete_sequence=['#66B2FF'])
            
            st.plotly_chart(fig)
            
    elif analysis_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        numeric_df = df.select_dtypes(include=[np.number])
        corr_matrix = numeric_df.corr()
        fig = px.imshow(corr_matrix, title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
                       color_continuous_scale=[[0, '#3B4992'],
                                            [0.5, '#FFFFFF'],
                                            [1, '#B40426']])
        st.plotly_chart(fig)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
def show_prediction():
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏")
    
    st.subheader("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
    st.markdown("""
        –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
        –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.
    """)

    col1, col2 = st.columns(2)
    
    with col1:
        gpa = st.number_input("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞", min_value=2.0, max_value=5.0, value=4.0, step=0.01)
        total_score = st.number_input("–û–±—â–∏–π –±–∞–ª–ª –ï–ì–≠", min_value=100, max_value=300, value=200)
        individual_achievements = st.number_input("–ë–∞–ª–ª—ã –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", min_value=0, max_value=10, value=0)
        
    with col2:
        faculty = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç", [
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", "–ú–µ–¥–∏—Ü–∏–Ω–∞", 
            "–§–∏–∑–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–ª–æ–ª–æ–≥–∏—è"
        ])
        study_form = st.selectbox("–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è", ["–û—á–Ω–∞—è", "–ó–∞–æ—á–Ω–∞—è"])
        admission_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è", 
            ["–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å", "–û—Å–æ–±–∞—è –∫–≤–æ—Ç–∞", "–¶–µ–ª–µ–≤–∞—è –∫–≤–æ—Ç–∞"]
        )

    if st.button("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        input_data = pd.DataFrame({
            'Gender': ['–ú'],  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'Age': [18],  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'Admission_Year': [2024],
            'GPA': [gpa],
            'Total_Score': [total_score],
            'Math_EGE': [total_score // 3],
            'Russian_EGE': [total_score // 3],
            'Profile_EGE': [total_score // 3],
            'Individual_Achievements': [individual_achievements],
            'Admission_Category': [admission_category],
            'Study_Form': [study_form],
            'Faculty': [faculty]
        })

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for column, encoder in st.session_state['label_encoders'].items():
            if column in input_data.columns:
                input_data[column] = encoder.transform(input_data[column])

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞ –∫ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        feature_weights = {
            'GPA': 3.0,  # –°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
            'Total_Score': 3.0,  # –°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
            'Individual_Achievements': 2.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            'Math_EGE': 1.5,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            'Profile_EGE': 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        }
        
        for feature, weight in feature_weights.items():
            if feature in input_data.columns:
                input_data[feature] = input_data[feature] * weight

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        input_data_scaled = st.session_state['scaler'].transform(input_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prediction = st.session_state['model'].predict(input_data_scaled)
        probabilities = st.session_state['model'].predict_proba(input_data_scaled)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factors = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä—Å
        competition = st.session_state['data'][st.session_state['data']['Faculty'] == faculty]['Competition_Per_Seat'].mean()
        if competition > 5:
            factors.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ: {competition:.2f} —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Å—Ç–æ")
        else:
            factors.append(f"‚úÖ –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ: {competition:.2f} —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Å—Ç–æ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è
        if study_form == "–û—á–Ω–∞—è":
            factors.append("‚ö†Ô∏è –û—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è")
        else:
            factors.append("‚úÖ –ó–∞–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –º–µ–Ω–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        if admission_category == "–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å":
            factors.append("‚ö†Ô∏è –û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å - —Å–∞–º–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è")
        else:
            factors.append(f"‚úÖ {admission_category} —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–ª—ã
        if total_score >= 270:
            factors.append("‚úÖ –í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π –±–∞–ª–ª –ï–ì–≠")
        elif total_score >= 240:
            factors.append("‚ÑπÔ∏è –°—Ä–µ–¥–Ω–∏–π –æ–±—â–∏–π –±–∞–ª–ª –ï–ì–≠")
        else:
            factors.append("‚ö†Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –æ–±—â–∏–π –±–∞–ª–ª –ï–ì–≠")
        
        if individual_achievements >= 8:
            factors.append("‚úÖ –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        elif individual_achievements >= 5:
            factors.append("‚ÑπÔ∏è –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        else:
            factors.append("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–ª –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")

        # –í—ã–≤–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        admission_probability = probabilities[0][1]
        if admission_probability >= 0.7:
            st.success(f"üéâ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {admission_probability:.1%}")
        elif admission_probability >= 0.4:
            st.warning(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {admission_probability:.1%}")
        else:
            st.error(f"‚ùå –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {admission_probability:.1%}")
        
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
        for factor in factors:
            st.write(factor)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendations = []
        
        if admission_probability < 0.7:  # –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–µ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è
            if admission_category == "–û–±—â–∏–π –∫–æ–Ω–∫—É—Ä—Å":
                recommendations.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ —Ü–µ–ª–µ–≤–æ–π –∫–≤–æ—Ç–µ")
            if study_form == "–û—á–Ω–∞—è":
                recommendations.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –∑–∞–æ—á–Ω—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è")
            if total_score < 250:
                recommendations.append("‚Ä¢ –ü–æ–≤—ã—Å—å—Ç–µ –æ–±—â–∏–π –±–∞–ª–ª –ï–ì–≠ - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—Ö–∞")
            if individual_achievements < 5:
                recommendations.append("‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
            if competition > 5:
                recommendations.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å –º–µ–Ω—å—à–∏–º –∫–æ–Ω–∫—É—Ä—Å–æ–º")
        
        if recommendations:
            for rec in recommendations:
                st.write(rec)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if page == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
    show_data_overview()
elif page == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
    analyze_data()
elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
    show_prediction()
